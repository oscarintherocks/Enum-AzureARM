<#
.SYNOPSIS
    Simple Script Creator - Create PowerShell scripts by pasting content

.DESCRIPTION
    This utility creates PowerShell scripts from pasted content. Simply run the script,
    paste your PowerShell code line by line, and type "EOL" on a new line to finish.
    The script will be saved automatically with a timestamp.

.EXAMPLE
    .\create-script-without-gui.ps1
    # Paste your PowerShell code
    # Type "EOL" on a new line when finished
    # Script will be saved as "Results\Script_YYYYMMDD_HHMMSS.ps1"

.NOTES
    Author: Simple Script Creator
    Version: 3.0
    Requires: PowerShell 5.1 or later
    Usage: Run script, paste content, type "EOL" to finish
#>

# Configuration - Change this variable to set the output filename pattern
$OutputFilePrefix = "Script"
$ResultsDir = "Results"

# Ensure Results directory exists
if (-not (Test-Path $ResultsDir)) {
    New-Item -ItemType Directory -Path $ResultsDir -Force | Out-Null
}

# Set error action preference
$ErrorActionPreference = 'Stop'

# Generate output filename with timestamp
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$OutputFile = Join-Path $ResultsDir "$OutputFilePrefix`_$timestamp.ps1"

# Display instructions
Write-Host ""
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "  Simple PowerShell Script Creator" -ForegroundColor Yellow
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Instructions:" -ForegroundColor Green
Write-Host "1. Paste or type your PowerShell code below" -ForegroundColor White
Write-Host "2. Press Enter after each line" -ForegroundColor White
Write-Host "3. Type 'EOL' on a new line when finished" -ForegroundColor White
Write-Host "4. Your script will be saved as: " -NoNewline -ForegroundColor White
Write-Host "$OutputFile" -ForegroundColor Yellow
Write-Host ""
Write-Host "Start entering your code:" -ForegroundColor Green
Write-Host ""

# Collect user input
$scriptContent = @()
$lineNumber = 1

do {
    Write-Host "$($lineNumber.ToString().PadLeft(3)): " -NoNewline -ForegroundColor DarkGray
    $inputLine = Read-Host
    
    if ($inputLine -eq "EOL") {
        break
    }
    
    $scriptContent += $inputLine
    $lineNumber++
    
} while ($true)

# Check if any content was entered
if ($scriptContent.Count -eq 0) {
    Write-Host ""
    Write-Warning "No content entered. Script creation cancelled."
    exit 1
}

# Create the script file
try {
    Write-Host ""
    Write-Host "Creating script..." -ForegroundColor Yellow
    
    # Add header comment to the generated script
    $header = @"
<#
Generated by Simple Script Creator
Created: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Total Lines: $($scriptContent.Count)
#>

"@
    
    # Combine header and content
    $fullContent = $header + ($scriptContent -join "`r`n")
    
    # Write to file
    $fullContent | Out-File -FilePath $OutputFile -Encoding UTF8
    
    Write-Host "✓ Script created successfully!" -ForegroundColor Green
    Write-Host "  File: " -NoNewline -ForegroundColor White
    Write-Host "$OutputFile" -ForegroundColor Yellow
    Write-Host "  Lines: " -NoNewline -ForegroundColor White
    Write-Host "$($scriptContent.Count)" -ForegroundColor Yellow
    Write-Host "  Size: " -NoNewline -ForegroundColor White
    Write-Host "$([math]::Round((Get-Item $OutputFile).Length / 1KB, 2)) KB" -ForegroundColor Yellow
    
    # Optional: Validate PowerShell syntax
    Write-Host ""
    Write-Host "Validating PowerShell syntax..." -ForegroundColor Yellow
    
    try {
        $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $OutputFile -Raw), [ref]$null)
        Write-Host "✓ PowerShell syntax validation passed!" -ForegroundColor Green
    }
    catch {
        Write-Warning "PowerShell syntax validation failed: $($_.Exception.Message)"
        Write-Host "The script was still created but may contain syntax errors." -ForegroundColor Yellow
    }
    
    # Ask if user wants to open the file
    Write-Host ""
    $openFile = Read-Host "Would you like to open the script file? (y/N)"
    if ($openFile -eq 'y' -or $openFile -eq 'Y') {
        if (Get-Command code -ErrorAction SilentlyContinue) {
            Write-Host "Opening in VS Code..." -ForegroundColor Green
            & code $OutputFile
        }
        elseif (Get-Command notepad -ErrorAction SilentlyContinue) {
            Write-Host "Opening in Notepad..." -ForegroundColor Green
            & notepad $OutputFile
        }
        else {
            Write-Host "No suitable editor found. File location: $OutputFile" -ForegroundColor Yellow
        }
    }
    
    Write-Host ""
    Write-Host "Script creation completed successfully!" -ForegroundColor Green
    
} catch {
    Write-Error "Failed to create script: $($_.Exception.Message)"
    exit 1
}
